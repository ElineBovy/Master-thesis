pomdp

// can observe the walls and target
observables 
	h_obs, h_obs_y
endobservables 

const int MAXh = 5;
const int MINh = -5;

const int MAXhdot = 2;
const int MINhdot = -2;
const int MAXhdotdot = 1;
const int MINhdotdot = -1;
const int obsval=2;
const int h_obsmax=(MAXh-MINh)/obsval;
const double hdotdot_gauss;
const double hdotdot_gauss2;
const double hdotdot_acc_nominal;
const int xinit=MAXh-1;
const int yinit=MINh+1;
formula crash = (h<=2 & h>=-2) & (h_y <=2 & h_y>=-2);
formula hobsval = (h_obs=50 & h_obs_y=50);
const int obsint=2;

module aircraft
	//relative distance to the intruder aircraft
	h : [MINh..MAXh] init xinit;
	h_y : [MINh..MAXh] init yinit;

	//relative speed to the intruder aircraft
	hdot : [MINhdot..MAXhdot] init 0;
	hdot_y : [MINhdot..MAXhdot] init 0;

	//observed distance to the intruder aircraft
	h_obs: [-30..50] init 50;
	h_obs_y: [-30..50] init 50;

	//observed rate
	c : [0..6] init 0;

	// update the altitude according to current rate
	[h_update]  hobsval & c=0 & !crash -> 1:(h'=max(MINh,min(MAXh,h+hdot))) & (h_y'=max(MINh,min(MAXh,h_y+hdot_y)))  &(c'=1);

	// adversary randomly chooses acceleration
	[h_update]  hobsval & c=1 & !crash-> (1-hdotdot_gauss):(hdot'=max(MINhdot,min(MAXhdot,hdot+1))) & (c'=4)
				+hdotdot_gauss:(hdot'=max(MINhdot,min(MAXhdot,hdot-1)))& (c'=4);
	[h_update] hobsval  & c=4 & !crash-> (1-hdotdot_gauss2):(hdot_y'=max(MINhdot,min(MAXhdot,hdot_y+1)))& (c'=5)
				+hdotdot_gauss2: (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y-1)))& (c'=5);
	[h_update]  hobsval & c=5 & !crash  -> 1:(h_obs'=floor(h/obsint))  & (h_obs_y'=floor(h_y/obsint))   &(c'=6);

	//the controller picks acceleration
	[h_update1] !hobsval  & c=6 & !crash->hdotdot_acc_nominal:(hdot'=max(MINhdot,min(MAXhdot,hdot+2))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y+2)))&(h_obs'=50)  & (h_obs_y'=50)   & (c'=0)+
			(1-hdotdot_acc_nominal):(hdot'=max(MINhdot,min(MAXhdot,hdot))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y)))& (h_obs'=50)  & (h_obs_y'=50)   &(c'=0);
	[h_update12] !hobsval  & c=6 & !crash->hdotdot_acc_nominal:(hdot'=max(MINhdot,min(MAXhdot,hdot-2))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y+2)))& (h_obs'=50)  & (h_obs_y'=50)   &(c'=0)+
			(1-hdotdot_acc_nominal):(hdot'=max(MINhdot,min(MAXhdot,hdot))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y)))& (h_obs'=50)  & (h_obs_y'=50)   &(c'=0);
	[h_update13] !hobsval  & c=6 & !crash->hdotdot_acc_nominal:(hdot'=max(MINhdot,min(MAXhdot,hdot+2))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y-2)))&(h_obs'=50)  & (h_obs_y'=50)   & (c'=0)+
			(1-hdotdot_acc_nominal):(hdot'=max(MINhdot,min(MAXhdot,hdot))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y)))&(h_obs'=50)  & (h_obs_y'=50)   & (c'=0);
	[h_update14] !hobsval  & c=6 & !crash->hdotdot_acc_nominal:(hdot'=max(MINhdot,min(MAXhdot,hdot-2))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y-2)))&(h_obs'=50)  & (h_obs_y'=50)   & (c'=0)+
			(1-hdotdot_acc_nominal):(hdot'=max(MINhdot,min(MAXhdot,hdot))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y)))& (h_obs'=50)  & (h_obs_y'=50)   & (c'=0);
	[h_update15] !hobsval  & c=6 & !crash->hdotdot_acc_nominal:(hdot'=max(MINhdot,min(MAXhdot,hdot))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y)))&(h_obs'=50)  & (h_obs_y'=50)   & (c'=0)+
			(1-hdotdot_acc_nominal):(hdot'=max(MINhdot,min(MAXhdot,hdot))) & (hdot_y'=max(MINhdot,min(MAXhdot,hdot_y)))& (h_obs'=50)  & (h_obs_y'=50)   & (c'=0);
	[crash_action] crash -> true;

endmodule

// reward structure to calculate steps
rewards
	  [h_update1] true : 1;
	 [h_update12] true : 1;
	 [h_update13] true : 1;
	 [h_update14] true : 1;
	 [crash_action] crash : 100;
endrewards

// target observation or state
label "goal" = h=MINh & h_y=MAXh;
